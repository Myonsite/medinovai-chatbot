version: '3.8'

name: medinovai-chatbot

services:
  # =============================================================================
  # AI CHATBOT API - Main Backend Service
  # =============================================================================
  chatbot-api:
    build:
      context: ./src
      dockerfile: Dockerfile
    container_name: medinovai-chatbot-api
    restart: unless-stopped
    ports:
      - "${API_PORT:-8000}:8000"
      - "${WEBSOCKET_PORT:-8001}:8001"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379/0
      - VECTOR_DB_URL=http://chroma:8000
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - AI_MODEL=${AI_MODEL:-gpt-4}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_PHONE_NUMBER=${TWILIO_PHONE_NUMBER}
      - MATTERMOST_URL=${MATTERMOST_URL}
      - MATTERMOST_TOKEN=${MATTERMOST_TOKEN}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - PHI_REDACTION_ENABLED=${PHI_REDACTION_ENABLED:-true}
      - AUDIT_LOGGING_ENABLED=${AUDIT_LOGGING_ENABLED:-true}
    volumes:
      - ./src:/app
      - ./docs:/app/docs:ro
      - chatbot-logs:/app/logs
    depends_on:
      - postgres
      - redis
      - chroma
    networks:
      - medinovai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # =============================================================================
  # ADMIN UI - Next.js Frontend
  # =============================================================================
  admin-ui:
    build:
      context: ./admin-ui
      dockerfile: Dockerfile
    container_name: medinovai-admin-ui
    restart: unless-stopped
    ports:
      - "${ADMIN_UI_PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - NEXT_PUBLIC_API_URL=http://chatbot-api:8000
      - NEXT_PUBLIC_WS_URL=ws://chatbot-api:8001
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:3000}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
    volumes:
      - ./admin-ui:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - chatbot-api
    networks:
      - medinovai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # MATTERMOST BOT - Presence & Escalation Service
  # =============================================================================
  mattermost-bot:
    build:
      context: ./mattermost-bot
      dockerfile: Dockerfile
    container_name: medinovai-mattermost-bot
    restart: unless-stopped
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - MATTERMOST_URL=${MATTERMOST_URL}
      - MATTERMOST_TOKEN=${MATTERMOST_TOKEN}
      - MATTERMOST_TEAM_ID=${MATTERMOST_TEAM_ID}
      - MATTERMOST_BOT_USERNAME=${MATTERMOST_BOT_USERNAME:-medinovai-assistant}
      - PRESENCE_CHECK_INTERVAL=${PRESENCE_CHECK_INTERVAL:-60}
      - AUTO_REASSIGN_TIMEOUT=${AUTO_REASSIGN_TIMEOUT:-300}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379/1
    volumes:
      - ./mattermost-bot:/app
      - mattermost-logs:/app/logs
    depends_on:
      - postgres
      - redis
      - chatbot-api
    networks:
      - medinovai-network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8002/health')"]
      interval: 60s
      timeout: 15s
      retries: 3

  # =============================================================================
  # DATABASES & STORAGE
  # =============================================================================
  
  # PostgreSQL - Primary Database
  postgres:
    image: postgres:15-alpine
    container_name: medinovai-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-medinovai_chatbot}
      - POSTGRES_USER=${POSTGRES_USER:-medinovai}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-medinovai_secure_pass_2024}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./infra/database/init:/docker-entrypoint-initdb.d:ro
    networks:
      - medinovai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-medinovai} -d ${POSTGRES_DB:-medinovai_chatbot}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis - Caching & Session Store
  redis:
    image: redis:7-alpine
    container_name: medinovai-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secure_pass_2024}
    volumes:
      - redis-data:/data
    networks:
      - medinovai-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Chroma - Vector Database for RAG
  chroma:
    image: chromadb/chroma:latest
    container_name: medinovai-chroma
    restart: unless-stopped
    ports:
      - "${CHROMA_PORT:-8000}:8000"
    environment:
      - CHROMA_HOST=0.0.0.0
      - CHROMA_PORT=8000
      - CHROMA_DB_IMPL=duckdb+parquet
      - CHROMA_PERSIST_DIRECTORY=/chroma/chroma
    volumes:
      - chroma-data:/chroma/chroma
    networks:
      - medinovai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # MONITORING & OBSERVABILITY
  # =============================================================================

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: medinovai-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./infra/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - medinovai-network
    profiles:
      - monitoring

  # Grafana - Metrics Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: medinovai-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin_secure_pass_2024}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./infra/monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - medinovai-network
    profiles:
      - monitoring

  # =============================================================================
  # REVERSE PROXY & SSL
  # =============================================================================
  
  # Nginx - Reverse Proxy & Load Balancer
  nginx:
    image: nginx:alpine
    container_name: medinovai-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infra/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./infra/ssl:/etc/ssl/certs:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - chatbot-api
      - admin-ui
    networks:
      - medinovai-network
    profiles:
      - production

  # =============================================================================
  # TESTING & DEVELOPMENT SERVICES
  # =============================================================================

  # Mailhog - Email Testing (Development)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: medinovai-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - medinovai-network
    profiles:
      - development

  # MinIO - S3-compatible Object Storage (Development)
  minio:
    image: minio/minio:latest
    container_name: medinovai-minio
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minio_secure_pass_2024}
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    networks:
      - medinovai-network
    profiles:
      - development

  # Elasticsearch - Alternative Vector Store (Optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: medinovai-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx1g"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - medinovai-network
    profiles:
      - elasticsearch

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  medinovai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  # Database Volumes
  postgres-data:
    driver: local
  redis-data:
    driver: local
  chroma-data:
    driver: local
  elasticsearch-data:
    driver: local
  
  # Application Volumes
  chatbot-logs:
    driver: local
  mattermost-logs:
    driver: local
  nginx-logs:
    driver: local
  
  # Monitoring Volumes
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  
  # Development Volumes
  minio-data:
    driver: local 